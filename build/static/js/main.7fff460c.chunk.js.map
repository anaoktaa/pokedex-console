{"version":3,"sources":["panel-button/panel-button.component.js","left-panel/left-panel.component.js","right-panel/right-panel.component.js","App.js","reportWebVitals.js","index.js"],"names":["PanelButton","loading","className","LeftPanel","id","name","description","sprites","error","useState","defaultSprites","setDefaultSprites","defaultRotate","setDefaultRotate","defaultShiny","setDefaultShiny","defaultGender","setDefaultGender","initialId","setInitialId","useEffect","changeSprites","src","alt","onClick","back_female","front_female","class","RightPanel","stats","types","height","weight","onNext","onPrev","onSubmit","defaultInput","setDefaultInput","console","log","style","width","map","item","stat","val","base_stat","sep","len","toString","repeat","length","typeItem","type","value","onChange","event","target","placeholder","min","App","initialPokemonId","setInitialPokemonId","setLoading","err","setErr","abilities","pokemonDetailData","setPokemonDetailData","axios","get","then","response","array","data","abilitiesDetail","promises","i","push","ability","url","responseAbility","Promise","all","allDescription","forEach","effect_entries","effectEntry","language","effect","catch","JSON","stringify","jsonErr","parse","message","Number","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7fff460c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './panel-button.styles.css';\r\n\r\nconst PanelButton = ({ loading }) => {\r\n    return (\r\n        <div className='panel-button-container'>\r\n            <div className='main-light-bg'>\r\n                <div className='main-light'>\r\n                    <div className='main-light-shine'>\r\n                        <div className='main-light-shiner'>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`red-button ${loading? 'blink' : ''}`}>\r\n                <div className='red-button-inner'>\r\n\r\n                </div>\r\n            </div>\r\n            <div className={`yellow-button ${loading? 'blink' : ''}`}>\r\n                <div className='yellow-button-inner'>\r\n\r\n                </div>\r\n            </div>\r\n            <div className={`green-button ${loading? 'blink' : ''}`}>\r\n                <div className='green-button-inner'>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default PanelButton;","import React, { useState, useEffect } from 'react';\r\n\r\nimport PanelButton from '../panel-button/panel-button.component';\r\n\r\nimport './left-panel.styles.css';\r\n\r\nconst LeftPanel = ({ id, name, description, sprites, loading, error }) => {\r\n    const [ defaultSprites, setDefaultSprites ]= useState(null);\r\n    const [ defaultRotate, setDefaultRotate ] = useState('front'); \r\n    const [ defaultShiny, setDefaultShiny ] = useState(''); \r\n    const [ defaultGender, setDefaultGender ] = useState(''); \r\n    const [ initialId, setInitialId ] = useState(null); \r\n\r\n    const handleRotate = () => {\r\n        if (defaultRotate === 'front') {\r\n            setDefaultRotate('back');\r\n        }\r\n        else {\r\n            setDefaultRotate('front');\r\n        }\r\n    }\r\n\r\n    const handleShiny = () => {\r\n        if (defaultShiny) {\r\n            setDefaultShiny('');\r\n        }\r\n        else  {\r\n            setDefaultShiny('_shiny');\r\n        }\r\n    }\r\n\r\n    const handleChangeGender = () => {\r\n        if (!sprites.back_female) return;\r\n        if (!sprites.front_female) return;\r\n\r\n        if (defaultGender === '') {\r\n            setDefaultGender('_female');\r\n        }\r\n        else {\r\n            setDefaultGender('');\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const changeSprites = () => {\r\n            if (!sprites) return;\r\n            let name = null;\r\n            if (id === initialId ) {\r\n                if (defaultShiny || defaultGender) {\r\n                    name = defaultRotate + defaultShiny +defaultGender;\r\n                }\r\n                else {\r\n                    name = defaultRotate + '_default';\r\n                }\r\n            }\r\n            else {\r\n                setInitialId(id);\r\n                setDefaultRotate('front');\r\n                setDefaultShiny('');\r\n                setDefaultGender('');\r\n                name = 'front_default';\r\n            }\r\n            setDefaultSprites(sprites[name]);\r\n        }\r\n\r\n        changeSprites();\r\n    }, [sprites, id, initialId, defaultRotate, defaultGender, defaultShiny])\r\n\r\n    return (\r\n        <div className='left-panel'>\r\n            <div className='row'>\r\n                <div className='left-curve'>\r\n                    <PanelButton\r\n                        loading={loading}\r\n                    />\r\n                    <div className='panel-border-bottom'/>\r\n                    <div className='triangle-square'>\r\n                        <div className='triangle-border'/>\r\n                    </div>\r\n                </div>\r\n                <div className='right-curve'>\r\n                    <div className='panel-border-right-bottom '/>\r\n                </div>\r\n            </div>\r\n         \r\n            <div className='left-panel-wrapper-screen'>\r\n                <div className='panel-container-left'>\r\n                    <div className='screen-left-panel-wrapper'>\r\n                        <div className='background-3'>\r\n                            {\r\n                                loading? \r\n                                <p className='pokemon-name-id' >Loading ... </p>\r\n                                :\r\n                                error?\r\n                                <p className='pokemon-name-id'>{error} </p>\r\n                                :\r\n                                <p className='pokemon-name-id'>  {name} No. {id}</p>\r\n                            }\r\n                           \r\n                        </div>\r\n                        <div className='pokemon-screen background-1 '>\r\n                            {\r\n                                loading?\r\n                                <p className='pokemon-name-id fs-35 fw-bold' >Loading ... </p>\r\n                                :\r\n                                error?\r\n                                <p className='pokemon-name-id fs-35 fw-bold' >{error}</p>\r\n                                :\r\n                                <img className='pokemon-sprites' src={defaultSprites} alt='pokemon' />\r\n                            }\r\n                    \r\n                        </div>\r\n                        <div className='control-panel'>\r\n                            <div className={`control ${defaultGender === '_female' ? ' sprite-control-selected' : ''}`} onClick={handleChangeGender}>\r\n                                <i class=\"fas fa-venus\"></i>\r\n                            </div>\r\n                            <div  className={`shiny-button ${defaultShiny === '_shiny' ? ' sprite-control-selected' : ''}`} onClick={handleShiny}>\r\n                                Shiny\r\n                            </div>\r\n                            <div className={`control ${defaultRotate === 'back' ? ' sprite-control-selected' : ''}`} onClick={handleRotate}>\r\n                                <i class=\"fas fa-undo-alt\"></i>\r\n                            </div>\r\n                        </div>\r\n                        <div className='background-3 pokemon-desc '>\r\n                            {\r\n                                loading?\r\n                                <p className='pokemon-name-id fs-24 fw-bold ta-center' >Loading ... </p>\r\n                                :\r\n                                error? \r\n                                <p className='pokemon-name-id fs-24 fw-bold ta-center' >{error}</p>\r\n                                : \r\n                                description\r\n                            }\r\n                        \r\n                        </div>               \r\n                    </div>\r\n                </div>\r\n                <div className='hinge'>\r\n                    <div className='border-short'/>\r\n                    <div className='gap'/>\r\n                    <div className='border'/>\r\n                    <div className='gap'/>\r\n                    <div className='border-short'/>\r\n                \r\n                </div>\r\n            </div>\r\n         \r\n      \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeftPanel","import React, { useState } from 'react';\r\n\r\nimport './right-panel.styles.css';\r\n\r\nconst RightPanel = ({ stats, types, height, weight, onNext, onPrev, loading, onSubmit, error }) => {\r\n\r\n    const [ defaultInput, setDefaultInput ] = useState('');\r\n\r\n    const handleNext = () => {\r\n        onNext();\r\n    }\r\n\r\n    const handlePrev = () => {\r\n        onPrev()\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        onSubmit(defaultInput);\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setDefaultInput(event.target.value)\r\n    }\r\n    \r\n    const padStats =  (stat, val, sep, len) => {\r\n        val = val || \"xx\";\r\n        let output = `\r\n        ${stat.toString()}${sep.repeat(len - (val.toString().length + stat.toString().length))}${val.toString()}`;\r\n        return output;\r\n    }\r\n\r\n    console.log('default input ',defaultInput)\r\n\r\n    return (\r\n        <div className='right-panel'>\r\n            <div className='yellow-background-clear'/>\r\n            <div className='right-clear'/>\r\n            <div className='row'>\r\n                <div className='left-panel-curve'> \r\n                    <div className='triangle-square-right'>\r\n                        <div className='triangle-border'/>\r\n                    </div>                \r\n                </div>\r\n                <div className='right-panel-curve'>\r\n                    <div className='right-panel-curve-clear'/>\r\n                </div>\r\n            </div>\r\n            <div className='panel-container-all'>\r\n                <div className='screen-right-panel-wrapper'>\r\n                    <div className='panel-row padding-10'>\r\n                        <div style={{width: '50%'}} className='pokemon-panel-name background-2 '>\r\n                            <div className='statics-container'>\r\n                                {\r\n                                    loading?\r\n                                        <p className='pokemon-name-id fs-35 fw-bold' >Loading ... </p>\r\n                                    :\r\n                                    error?\r\n                                        <p className='pokemon-name-id fs-24 fw-bold' > {error} </p>\r\n                                    :\r\n                                    stats.map((item) => (\r\n                                        <p key={item.stat.name} className='stat-text'>{padStats(item.stat.name, item.base_stat, \".\", 26)}</p>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='flex-column'>\r\n                            <div className='types-panel'>\r\n                                TYPES\r\n                            </div>\r\n                            <div className='background-2 types-container'>\r\n                                {\r\n                                    loading?\r\n                                        <p className='pokemon-name-id' >Loading ... </p>\r\n                                    :\r\n                                    error?\r\n                                        <p className='pokemon-name-id' >{error}</p>\r\n                                    :\r\n                                    types.map((typeItem) => (\r\n                                        <div key={typeItem.type.name} className={`types ${typeItem.type.name}`}>\r\n                                            {typeItem.type.name}\r\n                                        </div>\r\n                                    ))\r\n                                }                           \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='button-blue-container'>\r\n                        <div className='blue-button'/>\r\n                        <div className='blue-button'/>\r\n                        <div className='blue-button'/>\r\n                        <div className='blue-button'/>\r\n                        <div className='blue-button'/>\r\n                        <div className='blue-button'/>\r\n                        <div className='blue-button'/>\r\n                        <div className='blue-button'/>\r\n                    </div>\r\n                    <div className='hw-wrapper padding-10'>\r\n                        <div className='height-weight-container'>\r\n                            <div className='input-search'>\r\n                                <p>Height</p>\r\n                                {\r\n                                    loading?\r\n                                    <p>Loading ... </p>  \r\n                                    :\r\n                                    error?\r\n                                    <p>404 Not Found</p> \r\n                                    :\r\n                                    <p>{height} Meter</p> \r\n                                }\r\n                                                                \r\n                            </div>\r\n                        </div>\r\n                        <div className='height-weight-container'>\r\n                            <div className='input-search'>\r\n                                <p>Weight</p>\r\n                                {\r\n                                    loading?\r\n                                    <p>Loading ... </p>   \r\n                                    :\r\n                                    error?\r\n                                    <p>404 Not Found</p> \r\n                                    :\r\n                                    <p>{weight} Kg</p>   \r\n                                }                                 \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='control-container'>\r\n                        <div className='button-control' onClick={handlePrev}/>\r\n                        <div>\r\n                            <input value={defaultInput} onChange={handleChange} placeholder='ID' min={1} type='number' className='input-number gray-screen'/>\r\n                            <div onClick={handleSubmit} className='submit'/>\r\n                        </div>\r\n                        <div className='button-control' onClick={handleNext}/>\r\n                    </div>\r\n                 \r\n                </div>\r\n            </div>\r\n          \r\n         \r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default RightPanel;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport LeftPanel from './left-panel/left-panel.component';\r\nimport RightPanel from './right-panel/right-panel.component';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n\r\n    const [ initialPokemonId, setInitialPokemonId] = useState(1); \r\n    const [ loading, setLoading ] = useState(false); \r\n    const [ err, setErr ] = useState(null); \r\n    const [ pokemonDetailData, setPokemonDetailData ] = useState({\r\n        name: null,\r\n        id: null,\r\n        abilities: [],\r\n        description: null,\r\n        sprites: null,\r\n        stats: [],\r\n        types: [],\r\n        height: null,\r\n        weight: null\r\n    });  \r\n\r\n    const handleOnNext = () => {\r\n        console.log('next')\r\n        setInitialPokemonId(Number(initialPokemonId)+1);\r\n    }\r\n\r\n    const handleOnPrev = () => {\r\n        if (initialPokemonId <= 1) return;\r\n        setInitialPokemonId(Number(initialPokemonId)-1);\r\n        console.log('prev')   \r\n    }\r\n\r\n    const handleSubmit = id => {\r\n        if (!id) return;\r\n        setInitialPokemonId(id);\r\n    }\r\n\r\n    useEffect(() => {        \r\n        const fetchData = () => {\r\n            setLoading(true);\r\n            setErr(null);\r\n            setPokemonDetailData({\r\n                name: null,\r\n                id: null,\r\n                abilities: [],\r\n                description: null,\r\n                sprites: null,\r\n                stats: [],\r\n                types: [],\r\n                height: null,\r\n                weight: null\r\n            });\r\n            axios.get(`https://pokeapi.co/api/v2/pokemon/${initialPokemonId}`).then((response) => {\r\n                const array = response.data.abilities; \r\n                let abilitiesDetail = [];\r\n                let promises = [];\r\n                for (let i = 0; i < array.length; i++) {\r\n                promises.push(\r\n                    axios.get(response.data.abilities[i].ability.url).then(responseAbility => {\r\n                        abilitiesDetail.push(responseAbility.data);\r\n                    })\r\n                )\r\n                }\r\n                \r\n                Promise.all(promises).then(() => {\r\n                    let allDescription = '';\r\n                    abilitiesDetail.forEach((item) => {\r\n                        item.effect_entries.forEach((effectEntry) => {\r\n                            if (effectEntry.language.name === 'en') {\r\n                                allDescription = allDescription + effectEntry.effect\r\n                            }\r\n                        })\r\n                    })\r\n        \r\n                    setLoading(false);\r\n                    setPokemonDetailData({\r\n                        name: response.data.name,\r\n                        id: response.data.id,\r\n                        description: allDescription,\r\n                        abilities: response.data.abilities,\r\n                        sprites: response.data.sprites,\r\n                        stats: response.data.stats,\r\n                        types: response.data.types,\r\n                        height: response.data.height,\r\n                        weight: response.data.weight\r\n                    })\r\n                    \r\n                }).catch((err) => {\r\n                    setLoading(false);\r\n                    const error = JSON.stringify(err);\r\n                    const jsonErr = JSON.parse(error);\r\n                    setErr(jsonErr.message);\r\n                })\r\n\r\n        \r\n            \r\n            }).catch((err) => {\r\n                setLoading(false);\r\n                const error = JSON.stringify(err);\r\n                const jsonErr = JSON.parse(error);\r\n                setErr(jsonErr.message);\r\n            })\r\n        }\r\n\r\n        fetchData();\r\n    }, [initialPokemonId])\r\n\r\n    return (\r\n        <div className='app'> \r\n            <div className='pokedex'>\r\n                <LeftPanel\r\n                    name={pokemonDetailData.name}\r\n                    id={pokemonDetailData.id}\r\n                    description={pokemonDetailData.description}\r\n                    sprites={pokemonDetailData.sprites}\r\n                    loading={loading}\r\n                    error={err}\r\n                />\r\n                <RightPanel\r\n                    stats={pokemonDetailData.stats}\r\n                    types={pokemonDetailData.types}\r\n                    height={pokemonDetailData.height}\r\n                    weight={pokemonDetailData.weight}\r\n                    onPrev={handleOnPrev}\r\n                    onNext={handleOnNext}\r\n                    loading={loading}\r\n                    onSubmit={handleSubmit}\r\n                    error={err}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}